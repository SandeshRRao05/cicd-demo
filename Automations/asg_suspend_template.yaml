AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Auto Scaling Group suspension during deployments'

Parameters:
  AutoScalingGroupName:
    Type: String
    Description: Name of the Auto Scaling Group to suspend during deployments
  
  DefaultAction:
    Type: String
    Default: suspend
    AllowedValues:
      - suspend
      - resume
    Description: Default action to perform when no action is specified in the event
  
  ProcessesToSuspend:
    Type: String
    Default: Launch,Terminate,HealthCheck,ReplaceUnhealthy,AZRebalance
    Description: Comma-separated list of Auto Scaling processes to suspend/resume

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AutoScalingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:DescribeAutoScalingGroups
                Resource: !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroupName}'

  ASGSuspendFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ASGSuspendFunction-${AWS::StackName}'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ASG_NAME: !Ref AutoScalingGroupName
          DEFAULT_ACTION: !Ref DefaultAction
          PROCESSES: !Ref ProcessesToSuspend
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import logging

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize AWS clients
          autoscaling = boto3.client('autoscaling')

          def lambda_handler(event, context):
              """
              Lambda function to suspend/resume Auto Scaling processes during deployments
              
              Event format:
              {
                  "action": "suspend|resume",
                  "asg_name": "your-auto-scaling-group-name",
                  "processes": ["Launch", "Terminate", "HealthCheck", "ReplaceUnhealthy", "AZRebalance", "AlarmNotification", "ScheduledActions", "AddToLoadBalancer"]
              }
              """
              logger.info(f"Received event: {json.dumps(event)}")
              
              # Get parameters from event or environment variables
              action = event.get('action', os.environ.get('DEFAULT_ACTION', 'suspend'))
              asg_name = event.get('asg_name', os.environ.get('ASG_NAME'))
              processes = event.get('processes', os.environ.get('PROCESSES', 'Launch,Terminate,HealthCheck,ReplaceUnhealthy,AZRebalance').split(','))
              
              if not asg_name:
                  error_msg = "No Auto Scaling Group name provided"
                  logger.error(error_msg)
                  return {
                      'statusCode': 400,
                      'body': error_msg
                  }
              
              try:
                  if action.lower() == 'suspend':
                      logger.info(f"Suspending processes {processes} for ASG {asg_name}")
                      response = autoscaling.suspend_processes(
                          AutoScalingGroupName=asg_name,
                          ScalingProcesses=processes
                      )
                      message = f"Successfully suspended processes {processes} for ASG {asg_name}"
                  elif action.lower() == 'resume':
                      logger.info(f"Resuming processes {processes} for ASG {asg_name}")
                      response = autoscaling.resume_processes(
                          AutoScalingGroupName=asg_name,
                          ScalingProcesses=processes
                      )
                      message = f"Successfully resumed processes {processes} for ASG {asg_name}"
                  else:
                      error_msg = f"Invalid action: {action}. Must be 'suspend' or 'resume'"
                      logger.error(error_msg)
                      return {
                          'statusCode': 400,
                          'body': error_msg
                      }
                  
                  logger.info(message)
                  return {
                      'statusCode': 200,
                      'body': message
                  }
              
              except Exception as e:
                  error_msg = f"Error performing {action} on ASG {asg_name}: {str(e)}"
                  logger.error(error_msg)
                  return {
                      'statusCode': 500,
                      'body': error_msg
                  }

  # EventRule to trigger Lambda before deployment
  PreDeploymentRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'PreDeployment-${AWS::StackName}'
      Description: 'Rule to suspend ASG processes before deployment'
      State: ENABLED
      EventPattern:
        source:
          - aws.codedeploy
        detail-type:
          - CodeDeploy Deployment State-change Notification
        detail:
          state:
            - START
          deploymentGroup:
            - !Sub '.*${AutoScalingGroupName}.*'
      Targets:
        - Id: SuspendASGProcesses
          Arn: !GetAtt ASGSuspendFunction.Arn
          Input: !Sub '{"action": "suspend", "asg_name": "${AutoScalingGroupName}"}'

  # EventRule to trigger Lambda after deployment
  PostDeploymentRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'PostDeployment-${AWS::StackName}'
      Description: 'Rule to resume ASG processes after deployment'
      State: ENABLED
      EventPattern:
        source:
          - aws.codedeploy
        detail-type:
          - CodeDeploy Deployment State-change Notification
        detail:
          state:
            - SUCCESS
            - FAILURE
            - STOPPED
          deploymentGroup:
            - !Sub '.*${AutoScalingGroupName}.*'
      Targets:
        - Id: ResumeASGProcesses
          Arn: !GetAtt ASGSuspendFunction.Arn
          Input: !Sub '{"action": "resume", "asg_name": "${AutoScalingGroupName}"}'

  # Permission for EventBridge to invoke Lambda
  LambdaPermissionForPreDeployment:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ASGSuspendFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PreDeploymentRule.Arn

  LambdaPermissionForPostDeployment:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ASGSuspendFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PostDeploymentRule.Arn

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref ASGSuspendFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt ASGSuspendFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'