AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Modern Cloud Infrastructure (2025) - Auto-scaling web application with enhanced security.
  This template creates a load balanced, auto-scaled web application with private instances
  that only accept traffic from the load balancer. Includes modern networking, security,
  and deployment configurations.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Infrastructure Configuration"
        Parameters:
          - EnvironmentName
          - InstanceType
          - MinCapacity
          - MaxCapacity
          - DesiredCapacity
          - SSHAccess
      - Label:
          default: "Application Configuration"
        Parameters:
          - NodejsVersion
          - ApplicationPort
          - BucketPrefix

Parameters:
  EnvironmentName:
    Description: Environment name used for resource naming and tagging
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Staging
      - Production
  
  InstanceType:
    Description: EC2 instance type for the web servers
    Type: String
    Default: t3.small
    AllowedValues:
      # General Purpose - Intel
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m6i.large
      - m6i.xlarge
      - m6i.2xlarge
      # General Purpose - AMD
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m6a.large
      - m6a.xlarge
      - m6a.2xlarge
      # Compute Optimized - AMD
      - c6a.large
      - c6a.xlarge
      - c6a.2xlarge
      # Memory Optimized - AMD
      - r6a.large
      - r6a.xlarge
      - r6a.2xlarge
  
  MinCapacity:
    Description: Minimum number of instances in the Auto Scaling group
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
  
  MaxCapacity:
    Description: Maximum number of instances in the Auto Scaling group
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 20
  
  DesiredCapacity:
    Description: Desired number of instances in the Auto Scaling group
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
  
  SSHAccess:
    Description: CIDR block for SSH access to the instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  
  NodejsVersion:
    Description: Node.js version to install
    Type: String
    Default: 20.x
    AllowedValues:
      - 18.x
      - 20.x
      - 22.x
  
  ApplicationPort:
    Description: Port on which the application will run
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
    
  BucketPrefix:
    Description: Prefix for S3 bucket name (must be lowercase)
    Type: String
    Default: "build-artifact"
    AllowedPattern: ^[a-z0-9][a-z0-9\-\.]*$
    ConstraintDescription: Bucket prefix can include numbers, lowercase letters, and hyphens

Mappings:
  VPCIpSpace:
    us-east-1:
      RANGE: '10.42'
    us-east-2:
      RANGE: '10.43'
    us-west-2:
      RANGE: '10.42'
    us-west-1:
      RANGE: '10.43'
    ap-northeast-1:
      RANGE: '10.42'
    ap-northeast-2:
      RANGE: '10.43'
    ap-south-1:
      RANGE: '10.44'
    ap-southeast-1:
      RANGE: '10.42'
    ap-southeast-2:
      RANGE: '10.43'
    ca-central-1:
      RANGE: '10.42'
    eu-central-1:
      RANGE: '10.42'
    eu-west-1:
      RANGE: '10.42'
    eu-west-2:
      RANGE: '10.43'
    sa-east-1:
      RANGE: '10.42'
  
  publicSubnetConfig:
    publicSubnet01:
      CIDR: 10.0/24
    publicSubnet02:
      CIDR: 11.0/24   
  
  privateSubnetConfig:
    privateSubnet01:
      CIDR: 20.0/24
    privateSubnet02:
      CIDR: 21.0/24
  
  # 2025 Updated AMIs with modern OS versions
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0c7217cdde317cfec
    us-east-2:
      HVM64: ami-05fb0b8c1424f266b
    us-west-1:
      HVM64: ami-0ce2cb35386fc22e9
    us-west-2:
      HVM64: ami-008fe2fc65df48dac
    eu-west-1:
      HVM64: ami-0f3164307e8ae9812
    eu-west-2:
      HVM64: ami-0b1b3a0936b963903
    eu-central-1:
      HVM64: ami-06dd92ecc74fdfb36
    ap-northeast-1:
      HVM64: ami-07c589821f2b353aa
    ap-southeast-1:
      HVM64: ami-0fa377108253bf620
    ap-southeast-2:
      HVM64: ami-04f5097681773b989
    ap-south-1:
      HVM64: ami-006d3995d3a6b963b
    ca-central-1:
      HVM64: ami-0a2e7efb4257c0907
    sa-east-1:
      HVM64: ami-0fb4cf3a99aa89f72

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Fn::Join: 
          - ''
          - - Fn::FindInMap: 
              - VPCIpSpace
              - Ref: 'AWS::Region'
              - RANGE
            - .
            - 0.0/16      
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-vpc
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: CreatedDate
        Value: "2025-03-15"

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::Join:
          - ''
          - - Fn::FindInMap: 
                - VPCIpSpace
                - Ref: 'AWS::Region'
                - RANGE
            - .
            - Fn::FindInMap: 
                - publicSubnetConfig
                - publicSubnet01
                - CIDR      
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnetpublic01
      - Key: Environment
        Value: !Ref EnvironmentName

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::Join:
          - ''
          - - Fn::FindInMap: 
                - VPCIpSpace
                - Ref: 'AWS::Region'
                - RANGE
            - .
            - Fn::FindInMap: 
                - publicSubnetConfig
                - publicSubnet02
                - CIDR 
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnetpublic02
      - Key: Environment
        Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpcigw
        - Key: Environment
          Value: !Ref EnvironmentName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRTAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRTAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicNetworkAcl
        - Key: Environment
          Value: !Ref EnvironmentName

  InboundPublicNAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 2000
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 2000
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnetNetworkAclAssociation01:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation02:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::Join:
          - ''
          - - Fn::FindInMap: 
                - VPCIpSpace
                - Ref: 'AWS::Region'
                - RANGE
            - .
            - Fn::FindInMap: 
                - privateSubnetConfig
                - privateSubnet01
                - CIDR 
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnetprivate1
      - Key: Environment
        Value: !Ref EnvironmentName

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::Join:
          - ''
          - - Fn::FindInMap: 
                - VPCIpSpace
                - Ref: 'AWS::Region'
                - RANGE
            - .
            - Fn::FindInMap: 
                - privateSubnetConfig
                - privateSubnet02
                - CIDR 
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnetprivate2
      - Key: Environment
        Value: !Ref EnvironmentName

  NAT:
    DependsOn: PublicSubnetNetworkAclAssociation01
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NATGateway
        - Key: Environment
          Value: !Ref EnvironmentName

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
        - Key: Environment
          Value: !Ref EnvironmentName

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT

  PrivateSubnetRTAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRTAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable

  WebAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
      Path: /
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  S3EncryptionRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BackendRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:RegisterTargets'
              - 'autoscaling:Describe*'
              - 'autoscaling:EnterStandby'
              - 'autoscaling:ExitStandby'
              - 'autoscaling:UpdateAutoScalingGroup'
              - 'autoscaling:SuspendProcesses'
              - 'autoscaling:ResumeProcesses'
            Resource: '*'
      Roles:
        - !Ref WebAppRole

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebAppRole

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-ASG
      VPCZoneIdentifier:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinCapacity
      MaxSize: !Ref MaxCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebHost
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref EnvironmentName
        PropagateAtLaunch: true

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /home/ec2-user/node-website/app.js:
              content: !Sub |
                var http = require('http');
                http.createServer(function (req, res) {
                  res.writeHead(200, {'Content-Type': 'text/plain'});
                  res.end('Hello from ${AWS::StackName} (2025)!');
                }).listen(${ApplicationPort});
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                role=${WebAppRole}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --role ${WebAppRole} --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            cfn-hup:
              enabled: true
              ensureRunning: true
              files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      VersionDescription: Initial version
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-launch-template
            - Key: Environment
              Value: !Ref EnvironmentName
            - Key: CreatedDate
              Value: "2025-03-15"
      LaunchTemplateData:
        ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", HVM64]
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Update system packages
            yum update -y
            
            # Install required packages
            yum install -y ruby wget httpd
            
            # Install CodeDeploy agent with proper error handling
            cd /home/ec2-user
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            
            # Ensure CodeDeploy agent is running
            service codedeploy-agent status || service codedeploy-agent start
            systemctl enable codedeploy-agent
            
            # Verify CodeDeploy agent is running and log status
            if systemctl is-active codedeploy-agent; then
              echo "CodeDeploy agent is running successfully"
            else
              echo "WARNING: CodeDeploy agent is not running"
              service codedeploy-agent restart
            fi
            
            # Install Node.js
            curl -sL https://rpm.nodesource.com/setup_${NodejsVersion} | bash -
            yum install -y nodejs
            
            # Create application directory with proper permissions
            mkdir -p /var/www/html
            chmod -R 755 /var/www/html
            
            # Create empty placeholder files for scripts to prevent failures
            mkdir -p /opt/codedeploy-agent/deployment-root/deployment-instructions
            touch /opt/codedeploy-agent/deployment-root/deployment-instructions/deployment-group-id
            
            # Log completion
            mkdir -p /var/log/cloud-init
            echo "Initialization complete with CodeDeploy agent installed" > /var/log/cloud-init/cloud-init.log
            
            # Restart CodeDeploy agent one more time to ensure it's running
            service codedeploy-agent restart
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ALB
      - Key: Environment
        Value: !Ref EnvironmentName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TG
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: !Ref ApplicationPort
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-TG
      - Key: Environment
        Value: !Ref EnvironmentName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB-SG
        - Key: Environment
          Value: !Ref EnvironmentName

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web server instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAccess
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Instance-SG
        - Key: Environment
          Value: !Ref EnvironmentName

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${BucketPrefix}-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-s3bucket
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: CreatedDate
          Value: "2025-03-15"

  DeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Path: /
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  URL:
    Description: URL of the website
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}

  S3BucketName:
    Value: !Ref S3Bucket
    Description: Bucket for storing artifacts

  DeployRoleArn:
    Value: !Ref DeployTrustRole
    Description: CodeDeploy role ARN

  ALBTargetGroup:
    Value: !GetAtt ALBTargetGroup.TargetGroupName
    Description: Target Group Name

  ASGroup:
    Value: !Ref WebServerGroup
    Description: Auto Scaling Group Name